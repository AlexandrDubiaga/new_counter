{"version":3,"sources":["state/state.js","components/Display.jsx","components/Btn.jsx","components/Controls.jsx","App.js","serviceWorker.js","index.js"],"names":["state","app","isVisibleOptions","maxVal","minVal","counter","display","error","errorCheckMax","errorCheckMin","isDisabledButtonSet","maxInputValue","minInputValue","MIN","MAX","MIN_MAX","Display","changeValuesInputs","e","obj","currentTarget","value","trim","props","setState","isDisabledSet","changeMaxAndMinValue","changeIsVisibleSet","setOptions","val","this","JSON","parse","localStorage","getItem","nextProps","nextState","setItem","stringify","className","onChange","type","disabled","onClick","React","Component","Btn","button","isDisabled","onFunc","title","Controls","buttons","incrementCounter","refreshCounter","App","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57ce32ae.chunk.js","sourcesContent":["let state = {\n    app: {\n        isVisibleOptions: false,\n        maxVal: 5,\n        minVal: 0,\n        counter: 0\n    },\n    display: {\n        error: '',\n        errorCheckMax: false,\n        errorCheckMin: false,\n        isDisabledButtonSet: false,\n        maxInputValue:10,\n        minInputValue:0\n    }\n}\nexport default state","import React from 'react';\nimport state from \"../state/state\";\nconst MIN = 'Min';\nconst MAX= 'Max';\nconst MIN_MAX = 'Min != Max';\n\nclass Display extends React.Component {\n    state = state.display;\n    constructor() {\n        super()\n    }\n    componentDidMount(){\n        this.display = JSON.parse(localStorage.getItem('display'));\n        if (localStorage.getItem('display')) {\n            this.setState({\n                error: this.display.error,\n                errorCheckMax: this.display.errorCheckMax,\n                errorCheckMin: this.display.errorCheckMin,\n                isDisabledButtonSet: this.display.isDisabledButtonSet,\n                maxInputValue:this.display.maxInputValue,\n                minInputValue:this.display.minInputValue\n            })\n        } else {\n            this.setState({\n                error: '',\n                errorCheckMax: false,\n                errorCheckMin: false,\n                isDisabledButtonSet: false,\n                maxInputValue:10,\n                minInputValue:0\n            })\n        }\n    }\n\n\n    componentWillUpdate(nextProps, nextState) {\n        localStorage.setItem('display', JSON.stringify(nextState));\n    }\n\n    changeValuesInputs = (e) => {\n        let obj = {\n            maxVal: e.currentTarget[0].value.trim()===''?this.props.maxVal:e.currentTarget[0].value.trim(),\n            minVal: e.currentTarget[1].value.trim()===''?this.props.minVal:e.currentTarget[1].value.trim()\n        }\n\n        if (obj.maxVal > this.state.maxInputValue) {\n            this.setState({error: MAX+\" \"+this.state.maxInputValue, errorCheckMax: true})\n            this.isDisabledSet(true);\n        } else if (obj.maxVal < this.state.minInputValue) {\n            this.setState({error: MIN+\" \"+this.state.minInputValue, errorCheckMax: true})\n            this.isDisabledSet(true);\n        } else if (obj.minVal < this.state.minInputValue) {\n            this.setState({error: MIN+\" \"+this.state.minInputValue, errorCheckMin: true})\n            this.isDisabledSet(true);\n        } else if (obj.minVal > this.state.maxInputValue) {\n            this.setState({error: MAX+\" \"+this.state.maxInputValue, errorCheckMin: true})\n            this.isDisabledSet(true);\n        } else if (obj.minVal === obj.maxVal) {\n            this.setState({error: MIN_MAX, errorCheckMax: true,errorCheckMin: true})\n            this.isDisabledSet(true);\n        } else {\n            this.setState({errorCheckMax: false, errorCheckMin: false})\n            this.isDisabledSet(false);\n            this.props.changeMaxAndMinValue(obj);\n        }\n    }\n    changeIsVisibleSet = () => {\n        this.props.setOptions(false)\n    }\n    isDisabledSet = (val) => {\n        this.setState({isDisabledButtonSet: val})\n    }\n\n\n    render() {\n        let display = this.props.counter === this.props.maxVal ? 'Max: ' + this.props.maxVal : this.props.counter\n        return (\n            <div className=\"Display\">\n                <div>\n                    {this.props.isVisibleOptions ?\n                        <div className=\"FormBlock\">\n                            <form onChange={this.changeValuesInputs}>\n                                <table className=\"tableInDisplay\">\n                                    <tr>\n                                        <td>\n                                            <span\n                                                className={this.state.errorCheckMax ? 'errorInInputs' : 'OkInInputs'}>{this.state.errorCheckMax ? this.state.error : 'Max value:'}</span>\n                                        </td>\n                                        <td>\n                                            <input className={this.state.errorCheckMax ? 'errorInput' : ''}\n                                                   type=\"number\"\n                                                   value={this.props.maxVal}/></td>\n                                    </tr>\n                                    <tr>\n                                        <td><span\n                                            className={this.state.errorCheckMin ? 'errorInInputs' : 'OkInInputs'}>{this.state.errorCheckMin ? this.state.error : 'Start value:'}</span>\n                                        </td>\n                                        <td><input className={this.state.errorCheckMin ? 'errorInput' : ''}\n                                                   type=\"number\" value={this.props.minVal}/></td>\n                                    </tr>\n                                </table>\n                            </form>\n                            <button className={this.state.isDisabledButtonSet ? 'buttonColor' : ''}\n                                    disabled={this.state.isDisabledButtonSet}\n                                    onClick={this.changeIsVisibleSet}>{this.state.isDisabledButtonSet ? 'DISABLED' : 'SET'}</button>\n                        </div> :\n                        <div className={this.props.counter === this.props.maxVal ? 'dispayColor' : ''}>{display}</div>\n\n                    }\n                </div>\n\n\n            </div>\n        )\n    }\n}\nexport default Display;","import React from 'react';\nimport '../App.css';\n\nclass Btn extends React.Component {\n    render() {\n        return (\n            <div className='Button'>\n                <button disabled={this.props.button.isDisabled}\n                        className={this.props.button.isDisabled ? 'buttonColor' : ''}\n                        onClick={this.props.button.onFunc}>{this.props.button.isDisabled?this.props.button.disabled:this.props.button.title}</button>\n            </div>\n\n        );\n    }\n\n}\n\nexport default Btn;\n","import React from 'react';\nimport '../App.css';\nimport Btn from \"./Btn\";\n\nclass Controls extends React.Component {\n\n\n    render() {\n        let buttons = [\n            {title: 'INC', onFunc: this.props.incrementCounter,isDisabled:this.props.counter===this.props.maxVal,disabled:'DISABLED'},\n            {title: 'REFRESH', onFunc: this.props.refreshCounter,isDisabled:this.props.counter===this.props.minVal?true:false,disabled:'DISABLED'},\n            {title: 'SET', onFunc: ()=>this.props.setOptions(true)}\n        ]\n        return (\n            <div className='Controls'>\n                {!this.props.isVisibleOptions ?\n                    <div className=\"WrapperButtons\">\n                        <Btn button={buttons[0]}/>\n                        <Btn button={buttons[1]}/>\n                        <div> <Btn button = {buttons[2]}/></div>\n                    </div>:''\n\n                }\n            </div>\n\n        );\n    }\n\n}\n\nexport default Controls;\n","import React from 'react';\nimport './App.css';\nimport Display from \"./components/Display\";\nimport Controls from \"./components/Controls\";\nimport state from \"./state/state\";\n\nclass App extends React.Component {\n    state = state.app;\n\n    constructor() {\n        super()\n    }\n    componentDidMount(){\n        this.app = JSON.parse(localStorage.getItem('main'));\n        if (localStorage.getItem('main')) {\n            this.setState({\n                isVisibleOptions: this.app.isVisibleOptions,\n                maxVal: this.app.maxVal,\n                minVal: this.app.minVal,\n                counter: this.app.counter\n            })\n        } else {\n            this.setState({\n                isVisibleOptions: false,\n                maxVal: 5,\n                minVal: 0,\n                counter: 0\n            })\n        }\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        localStorage.setItem('main', JSON.stringify(nextState));\n    }\n\n    changeMaxAndMinValue = (obj) => {\n        this.setState({counter: parseInt(obj.minVal)})\n        this.setState({maxVal: parseInt(obj.maxVal), minVal: parseInt(obj.minVal)});\n    }\n\n    incrementCounter = () => {\n        this.setState({counter: ++this.state.counter});\n    }\n    refreshCounter = () => {\n        this.setState({counter: 0, minVal: 0})\n    }\n    setOptions = (val) => {\n        this.setState({isVisibleOptions: val})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"Wrapper\">\n                    <div className={!this.state.isVisibleOptions ? 'maxVal' : 'maxHide'}>Max\n                        value: {this.state.maxVal}</div>\n                    <Display counter={this.state.counter}\n                             changeMaxAndMinValue={this.changeMaxAndMinValue} maxVal={this.state.maxVal}\n                             minVal={this.state.minVal} setOptions={this.setOptions}\n                             isVisibleOptions={this.state.isVisibleOptions}/>\n                    <Controls counter={this.state.counter} maxVal={this.state.maxVal}\n                              minVal={this.state.minVal} isVisibleOptions={this.state.isVisibleOptions}\n                              setOptions={this.setOptions}\n                              refreshCounter={this.refreshCounter}\n                              incrementCounter={this.incrementCounter}/>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}