{"version":3,"sources":["state/state.js","components/Display.jsx","components/Btn.jsx","components/Controls.jsx","App.js","serviceWorker.js","index.js"],"names":["state","app","isVisibleOptions","maxVal","minVal","counter","display","error","errorCheckMax","errorCheckMin","isDisabledButtonSet","maxInputValue","minInputValue","MIN","MAX","MIN_MAX","Display","changeValuesInputs","e","obj","parseInt","currentTarget","value","trim","setState","isDisabledSet","props","changeMaxAndMinValue","changeIsVisibleSet","setOptions","val","this","JSON","parse","localStorage","getItem","nextProps","nextState","setItem","stringify","className","onChange","type","disabled","onClick","React","Component","Btn","button","isDisabled","onFunc","title","Controls","buttons","incrementCounter","refreshCounter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38522a4c.chunk.js","sourcesContent":["let state = {\r\n    app: {\r\n        isVisibleOptions: false,\r\n        maxVal: 5,\r\n        minVal: 0,\r\n        counter: 0\r\n    },\r\n    display: {\r\n        error: '',\r\n        errorCheckMax: false,\r\n        errorCheckMin: false,\r\n        isDisabledButtonSet: false,\r\n        maxInputValue:10,\r\n        minInputValue:0\r\n    }\r\n}\r\nexport default state","import React from 'react';\r\nimport state from \"../state/state\";\r\nconst MIN = 'Min';\r\nconst MAX= 'Max';\r\nconst MIN_MAX = 'Min != Max';\r\n\r\nclass Display extends React.Component {\r\n    state = state.display;\r\n    constructor() {\r\n        super()\r\n    }\r\n    componentDidMount(){\r\n        this.display = JSON.parse(localStorage.getItem('display'));\r\n        if (localStorage.getItem('display')) {\r\n            this.setState({\r\n                error: this.display.error,\r\n                errorCheckMax: this.display.errorCheckMax,\r\n                errorCheckMin: this.display.errorCheckMin,\r\n                isDisabledButtonSet: this.display.isDisabledButtonSet,\r\n                maxInputValue:this.display.maxInputValue,\r\n                minInputValue:this.display.minInputValue\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: '',\r\n                errorCheckMax: false,\r\n                errorCheckMin: false,\r\n                isDisabledButtonSet: false,\r\n                maxInputValue:10,\r\n                minInputValue:0\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n        localStorage.setItem('display', JSON.stringify(nextState));\r\n    }\r\n\r\n    changeValuesInputs = (e) => {\r\n        let obj = {\r\n            maxVal: parseInt(e.currentTarget[0].value.trim()),\r\n            minVal: parseInt(e.currentTarget[1].value.trim())\r\n        }\r\n        if (obj.maxVal > this.state.maxInputValue) {\r\n            this.setState({error: MAX+\" \"+this.state.maxInputValue, errorCheckMax: true})\r\n            this.isDisabledSet(true);\r\n        } else if (obj.maxVal < this.state.minInputValue) {\r\n            this.setState({error: MIN+\" \"+this.state.minInputValue, errorCheckMax: true})\r\n            this.isDisabledSet(true);\r\n        } else if (obj.minVal < this.state.minInputValue) {\r\n            this.setState({error: MIN+\" \"+this.state.minInputValue, errorCheckMin: true})\r\n            this.isDisabledSet(true);\r\n        } else if (obj.minVal > this.state.maxInputValue) {\r\n            this.setState({error: MAX+\" \"+this.state.maxInputValue, errorCheckMin: true})\r\n            this.isDisabledSet(true);\r\n        } else if (obj.minVal === obj.maxVal) {\r\n            this.setState({error: MIN_MAX, errorCheckMax: true,errorCheckMin: true})\r\n            this.isDisabledSet(true);\r\n        } else {\r\n            this.setState({errorCheckMax: false, errorCheckMin: false})\r\n            this.isDisabledSet(false);\r\n            this.props.changeMaxAndMinValue(obj);\r\n        }\r\n    }\r\n    changeIsVisibleSet = () => {\r\n        this.props.setOptions(false)\r\n    }\r\n    isDisabledSet = (val) => {\r\n        this.setState({isDisabledButtonSet: val})\r\n    }\r\n\r\n\r\n    render() {\r\n        let display = this.props.counter === this.props.maxVal ? 'Max: ' + this.props.maxVal : this.props.counter\r\n        return (\r\n            <div className=\"Display\">\r\n                <div>\r\n                    {this.props.isVisibleOptions ?\r\n                        <div className=\"FormBlock\">\r\n                            <form onChange={this.changeValuesInputs}>\r\n                                <table className=\"tableInDisplay\">\r\n                                    <tr>\r\n                                        <td>\r\n                                            <span\r\n                                                className={this.state.errorCheckMax ? 'errorInInputs' : 'OkInInputs'}>{this.state.errorCheckMax ? this.state.error : 'Max value:'}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input className={this.state.errorCheckMax ? 'errorInput' : ''}\r\n                                                   type=\"number\"\r\n                                                   value={this.props.maxVal}/></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td><span\r\n                                            className={this.state.errorCheckMin ? 'errorInInputs' : 'OkInInputs'}>{this.state.errorCheckMin ? this.state.error : 'Start value:'}</span>\r\n                                        </td>\r\n                                        <td><input className={this.state.errorCheckMin ? 'errorInput' : ''}\r\n                                                   type=\"number\" value={this.props.minVal}/></td>\r\n                                    </tr>\r\n                                </table>\r\n                            </form>\r\n                            <button className={this.state.isDisabledButtonSet ? 'buttonColor' : ''}\r\n                                    disabled={this.state.isDisabledButtonSet}\r\n                                    onClick={this.changeIsVisibleSet}>{this.state.isDisabledButtonSet ? 'DISABLED' : 'SET'}</button>\r\n                        </div> :\r\n                        <div className={this.props.counter === this.props.maxVal ? 'dispayColor' : ''}>{display}</div>\r\n\r\n                    }\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Display;","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Btn extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='Button'>\r\n                <button disabled={this.props.button.isDisabled}\r\n                        className={this.props.button.isDisabled ? 'buttonColor' : ''}\r\n                        onClick={this.props.button.onFunc}>{this.props.button.isDisabled?this.props.button.disabled:this.props.button.title}</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Btn;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Btn from \"./Btn\";\r\n\r\nclass Controls extends React.Component {\r\n\r\n\r\n    render() {\r\n        let buttons = [\r\n            {title: 'INC', onFunc: this.props.incrementCounter,isDisabled:this.props.counter===this.props.maxVal,disabled:'DISABLED'},\r\n            {title: 'REFRESH', onFunc: this.props.refreshCounter,isDisabled:this.props.counter===this.props.minVal?true:false,disabled:'DISABLED'},\r\n            {title: 'SET', onFunc: ()=>this.props.setOptions(true)}\r\n        ]\r\n        return (\r\n            <div className='Controls'>\r\n                {!this.props.isVisibleOptions ?\r\n                    <div className=\"WrapperButtons\">\r\n                        <Btn button={buttons[0]}/>\r\n                        <Btn button={buttons[1]}/>\r\n                        <div> <Btn button = {buttons[2]}/></div>\r\n                    </div>:''\r\n\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Display from \"./components/Display\";\r\nimport Controls from \"./components/Controls\";\r\nimport state from \"./state/state\";\r\n\r\nclass App extends React.Component {\r\n    state = state.app;\r\n\r\n    constructor() {\r\n        super()\r\n    }\r\n    componentDidMount(){\r\n        this.app = JSON.parse(localStorage.getItem('main'));\r\n        if (localStorage.getItem('main')) {\r\n            this.setState({\r\n                isVisibleOptions: this.app.isVisibleOptions,\r\n                maxVal: this.app.maxVal,\r\n                minVal: this.app.minVal,\r\n                counter: this.app.counter\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isVisibleOptions: false,\r\n                maxVal: 5,\r\n                minVal: 0,\r\n                counter: 0\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n        localStorage.setItem('main', JSON.stringify(nextState));\r\n    }\r\n\r\n    changeMaxAndMinValue = (obj) => {\r\n        this.setState({counter: obj.minVal})\r\n        this.setState({maxVal: obj.maxVal, minVal: obj.minVal});\r\n    }\r\n\r\n    incrementCounter = () => {\r\n        this.setState({counter: ++this.state.counter});\r\n    }\r\n    refreshCounter = () => {\r\n        this.setState({counter: 0, minVal: 0})\r\n    }\r\n    setOptions = (val) => {\r\n        this.setState({isVisibleOptions: val})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"Wrapper\">\r\n                    <div className={!this.state.isVisibleOptions ? 'maxVal' : 'maxHide'}>Max\r\n                        value: {this.state.maxVal}</div>\r\n                    <Display counter={this.state.counter}\r\n                             changeMaxAndMinValue={this.changeMaxAndMinValue} maxVal={this.state.maxVal}\r\n                             minVal={this.state.minVal} setOptions={this.setOptions}\r\n                             isVisibleOptions={this.state.isVisibleOptions}/>\r\n                    <Controls counter={this.state.counter} maxVal={this.state.maxVal}\r\n                              minVal={this.state.minVal} isVisibleOptions={this.state.isVisibleOptions}\r\n                              setOptions={this.setOptions}\r\n                              refreshCounter={this.refreshCounter}\r\n                              incrementCounter={this.incrementCounter}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}